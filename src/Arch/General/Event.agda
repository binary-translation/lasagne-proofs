{-# OPTIONS --without-K --safe #-}


-- | An architecture-agnostic event specification.
--
-- Every event is parameterised by a `Label`, which represents the architecture-specific event labeling.
-- Any achitecture must ensure their `Label` instantiates `LabelClass`, which ensures every event is
-- either of Read, Write, or Fence event. However, different architectures may associate different
-- ordering behavior with any of those events. (e.g., acquire-reads or store-fences in Arm)
module Arch.General.Event where

-- Stdlib imports
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_≡_; _≢_; refl; cong; cong-app; sym; subst; subst₂)
open import Level using () renaming (zero to ℓzero)
open import Data.Product using (∃-syntax; _,_)
open import Data.Nat using (ℕ)
open import Relation.Nullary using (¬_)
open import Relation.Unary using (Pred; _∈_; Empty)
-- Local library imports
open import Dodo.Unary
open import Dodo.Binary
-- Local imports
open import Helpers


-- # Primitives

-- Unique memory location. A value may be stored at this location
Location = ℕ

-- Value read/written during execution
-- For now, model values as natural numbers. Eventually, 32-bit or 64-bit
-- integers should be used, but that is not quite relevant here.
Value = ℕ

-- Unique identifier of an event
UniqueId = ℕ

-- The thread in the execution in which the event occurs
ThreadId = ℕ


-- # Label

-- Read/Write events can be generated from either RMOV or RMW instructions.
-- To distinguish those, they're tagged.
--
-- Note that this specifically links the event to the /type of instruction/
-- from which it was generated. As only the events are modeled, but not the
-- instructions generating them, this `Tag` connects them. (In particular
-- because atomic and relaxed operations behave differently)
data Tag : Set where
  -- Non-rmw read/write events. May also be an init event
  tmov : Tag
  -- A read event generated by an RMW instruction. May be successful or failed.
  trmw : Tag


-- | type class. Event labels. This should be individually instantiated for
-- every architecture.
record LabelClass (Label : Set) : Set₁ where
  field
    labs-r : Pred Label ℓzero -- ^ The set of read labels
    labs-w : Pred Label ℓzero -- ^ The set of write labels
    labs-f : Pred Label ℓzero -- ^ The set of fence labels

    -- Every event is /exclusively either/ a read, write, or fence event
    labs-xopt : XOptPred₃ labs-r labs-w labs-f
    
    labs-r-unique : UniquePred labs-r
    labs-w-unique : UniquePred labs-w
    labs-f-unique : UniquePred labs-f

    -- Read/Write events have a tag, indicating whether it came from a regular move instruction or a RMW instruction.
    lab-r-tag : {lab : Label} → labs-r lab → Tag
    lab-w-tag : {lab : Label} → labs-w lab → Tag

    -- Read events have both a location and value
    lab-r-loc : {lab : Label} → labs-r lab → Location
    lab-r-val : {lab : Label} → labs-r lab → Value

    -- Write events have both a location and value
    lab-w-loc : {lab : Label} → labs-w lab → Location
    lab-w-val : {lab : Label} → labs-w lab → Value

    lab-eq-dec : DecRel (_≡_ {_} {Label})
    
open LabelClass {{...}}


-- # Event

-- | A generic event in an execution (w.r.t. axiomatic memory models)
-- Every architecture can define their own set of labels.
data Event (Label : Set) {{_ : LabelClass Label}} : Set where
  -- Helper events that occur before the "real" events in the execution (in po and co)
  event-init : UniqueId → Location → Value → Event Label
  -- Helper events that occur within a thread, but do /nothing/. These are useful for
  -- proofs when eliminating instructions between source and target.
  event-skip : UniqueId → ThreadId → Event Label
  event      : UniqueId → ThreadId → Label → Event Label


-- # Unary Predicates

data HasUid {Label : Set} {{_ : LabelClass Label}} (uid : UniqueId) : Event Label → Set where
  has-uid-init : {loc : Location} → {val : Value} → HasUid uid (event-init uid loc val)
  has-uid-skip : {tid : ThreadId} → HasUid uid (event-skip uid tid)
  has-uid      : {tid : ThreadId} → {lab : Label} → HasUid uid (event uid tid lab)
  
data HasTid {Label : Set} {{_ : LabelClass Label}} (tid : ThreadId) : Event Label → Set where
  has-tid-skip : {uid : UniqueId} → HasTid tid (event-skip uid tid)
  has-tid      : {uid : UniqueId} {lab : Label} → HasTid tid (event uid tid lab)
  
data HasLoc {Label : Set} {{_ : LabelClass Label}} (loc : Location) : Event Label → Set where
  has-loc-init : {uid : UniqueId} {val : Value} → HasLoc loc (event-init uid loc val)
  has-loc-r    : {uid : UniqueId} {tid : ThreadId} {lab : Label} → (lab-r : labs-r lab) → loc ≡ lab-r-loc lab-r → HasLoc loc (event uid tid lab)
  has-loc-w    : {uid : UniqueId} {tid : ThreadId} {lab : Label} → (lab-w : labs-w lab) → loc ≡ lab-w-loc lab-w → HasLoc loc (event uid tid lab)

data HasVal {Label : Set} {{_ : LabelClass Label}} (val : Value) : Event Label → Set where
  has-val-init : {uid : UniqueId} {loc : Location} → HasVal val (event-init uid loc val)
  has-val-r    : {uid : UniqueId} {tid : ThreadId} {lab : Label} → (lab-r : labs-r lab) → val ≡ lab-r-val lab-r → HasVal val (event uid tid lab)
  has-val-w    : {uid : UniqueId} {tid : ThreadId} {lab : Label} → (lab-w : labs-w lab) → val ≡ lab-w-val lab-w → HasVal val (event uid tid lab)

data HasTag {Label : Set} {{_ : LabelClass Label}} (tag : Tag) : Event Label → Set where
  has-tag-init : {uid : UniqueId} {loc : Location} {val : Value} → tag ≡ tmov → HasTag tag (event-init uid loc val)
  has-tag-r    : {uid : UniqueId} {tid : ThreadId} {lab : Label} → (lab-r : labs-r lab) → tag ≡ lab-r-tag lab-r → HasTag tag (event uid tid lab)
  has-tag-w    : {uid : UniqueId} {tid : ThreadId} {lab : Label} → (lab-w : labs-w lab) → tag ≡ lab-w-tag lab-w → HasTag tag (event uid tid lab)


-- ## Unary Predicates: Extras

HasSomeUid : {Label : Set} {{_ : LabelClass Label}} → Pred (Event Label) ℓzero
HasSomeUid ev = ∃[ uid ] HasUid uid ev

HasSomeTid : {Label : Set} {{_ : LabelClass Label}} → Pred (Event Label) ℓzero
HasSomeTid ev = ∃[ tid ] HasTid tid ev

HasSomeLoc : {Label : Set} {{_ : LabelClass Label}} → Pred (Event Label) ℓzero
HasSomeLoc ev = ∃[ loc ] HasLoc loc ev

HasSomeVal : {Label : Set} {{_ : LabelClass Label}} → Pred (Event Label) ℓzero
HasSomeVal ev = ∃[ val ] HasVal val ev

HasSomeTag : {Label : Set} {{_ : LabelClass Label}} → Pred (Event Label) ℓzero
HasSomeTag ev = ∃[ tag ] HasTag tag ev


-- # Binary Predicates

data SameUid {Label₁ Label₂ : Set} {{_ : LabelClass Label₁}} {{_ : LabelClass Label₂}}
    (a : Event Label₁) (b : Event Label₂) : Set where
  same-uid : {uid : ℕ} → HasUid uid a → HasUid uid b → SameUid a b
  
data SameTid {Label₁ Label₂ : Set} {{_ : LabelClass Label₁}} {{_ : LabelClass Label₂}}
    (a : Event Label₁) (b : Event Label₂) : Set where
  same-tid : {tid : ℕ} → HasTid tid a → HasTid tid b → SameTid a b

data SameLoc {Label₁ Label₂ : Set} {{_ : LabelClass Label₁}} {{_ : LabelClass Label₂}}
    (a : Event Label₁) (b : Event Label₂) : Set where
  same-loc : {l : Location} → HasLoc l a → HasLoc l b → SameLoc a b

data SameVal {Label₁ Label₂ : Set} {{_ : LabelClass Label₁}} {{_ : LabelClass Label₂}}
    (a : Event Label₁) (b : Event Label₂) : Set where
  same-val : {v : Value} → HasVal v a → HasVal v b → SameVal a b

data SameTag {Label₁ Label₂ : Set} {{_ : LabelClass Label₁}} {{_ : LabelClass Label₂}}
    (a : Event Label₁) (b : Event Label₂) : Set where
  same-tag : {t : Tag} → HasTag t a → HasTag t b → SameTag a b


-- # Event Sets

-- | The set of read events
data EvR {Label : Set} {{_ : LabelClass Label}} : Event Label → Set where
  ev-r : {uid : UniqueId} {tid : ThreadId} {lab : Label} → labs-r lab → EvR (event uid tid lab)

-- | The set of read events indexed by their tag (mov/rmw)
data EvRₜ {Label : Set} {{_ : LabelClass Label}} (tag : Tag) : Event Label → Set where
  ev-r : {uid : UniqueId} {tid : ThreadId} {lab : Label} → (lab-r : labs-r lab) → tag ≡ lab-r-tag lab-r → EvRₜ tag (event uid tid lab)

-- | The set of write events
data EvW {Label : Set} {{_ : LabelClass Label}} : Event Label → Set where
  ev-init : {uid : UniqueId} {loc : Location} {val : Value} → EvW (event-init uid loc val)
  ev-w : {uid : UniqueId} {tid : ThreadId} {lab : Label} → labs-w lab → EvW (event uid tid lab)

-- | The set of write events indexed by their tag (mov/rmw)
data EvWₜ {Label : Set} {{_ : LabelClass Label}} (tag : Tag) : Event Label → Set where
  ev-init : {uid : UniqueId} {loc : Location} {val : Value} → tag ≡ tmov → EvWₜ tag (event-init uid loc val)
  ev-w : {uid : UniqueId} {tid : ThreadId} {lab : Label} → (lab-w : labs-w lab) → tag ≡ lab-w-tag lab-w → EvWₜ tag (event uid tid lab)

-- | The set of write events, without init events, indexed by their tag (mov/rmw)
data EvWₙₜ {Label : Set} {{_ : LabelClass Label}} (tag : Tag) : Event Label → Set where
  ev-w : {uid : UniqueId} {tid : ThreadId} {lab : Label} → (lab-w : labs-w lab) → tag ≡ lab-w-tag lab-w → EvWₙₜ tag (event uid tid lab)

-- | The set of write events, without init events, indexed by their tag (mov/rmw)
data EvWₙ {Label : Set} {{_ : LabelClass Label}} : Event Label → Set where
  ev-w : {uid : UniqueId} {tid : ThreadId} {lab : Label} → (lab-w : labs-w lab) → EvWₙ (event uid tid lab)

-- | The set of fence events
data EvF {Label : Set} {{_ : LabelClass Label}} : Event Label → Set where
  ev-f : {uid : UniqueId} {tid : ThreadId} {lab : Label} → labs-f lab → EvF (event uid tid lab)

-- | The set of all events
data EvE {Label : Set} {{_ : LabelClass Label}} : Event Label → Set where
  ev-init : {uid : UniqueId} {loc : Location} {val : Value} → EvE (event-init uid loc val)
  ev-skip : {uid : UniqueId} {tid : ThreadId} → EvE (event-skip uid tid)
  ev-r    : {uid : UniqueId} {tid : ThreadId} {lab : Label} → labs-r lab → EvE (event uid tid lab)
  ev-w    : {uid : UniqueId} {tid : ThreadId} {lab : Label} → labs-w lab → EvE (event uid tid lab)
  ev-f    : {uid : UniqueId} {tid : ThreadId} {lab : Label} → labs-f lab → EvE (event uid tid lab)

-- | The set of init events
data EvInit {Label : Set} {{_ : LabelClass Label}} : Event Label → Set where
  ev-init : {uid : UniqueId} {loc : Location} {val : Value} → EvInit (event-init uid loc val)

-- | The set of skip events
data EvSkip {Label : Set} {{_ : LabelClass Label}} : Event Label → Set where
  ev-skip : {uid : UniqueId} {tid : ThreadId} → EvSkip (event-skip uid tid)

-- | The set of Read/Write events
--
-- # Design decision: Not _∪₁_
--
-- An alternative definition could be:
-- > EvRW = EvR ∪₁ EvW
--
-- Its advantage is composability of more elementary sets. However, readability of proofs
-- diminishes. To illustrate this, consider another set of events:
-- > EvRWF = EvR ∪₁ EvW ∪₁ EvF
--
-- Pattern-matching on any instance of it will take the shape:
-- > foo (inj₁ (inj₁ x-r)) = ...
-- > foo (inj₁ (inj₂ y-w)) = ...
-- > foo (inj₂ x-f) = ...
--
-- Obtaining endless unions of sets makes the individual cases in proofs harder to read.
-- A (subjectively) preferable approach to the above pattern would be:
-- > foo (ev-r x-r) = ...
-- > foo (ev-w x-w) = ...
-- > foo (ev-f x-f) = ...
--
-- For this purpose, this library uses uniform constructor names between different
-- (but similar) data-types, and avoids the _∪₁_ whenever possible.
data EvRW {Label : Set} {{_ : LabelClass Label}} : Event Label → Set where
  ev-init : {uid : UniqueId} {loc : Location} {val : Value} → EvRW (event-init uid loc val)
  ev-r    : {uid : UniqueId} {tid : ThreadId} {lab : Label} → labs-r lab → EvRW (event uid tid lab)
  ev-w    : {uid : UniqueId} {tid : ThreadId} {lab : Label} → labs-w lab → EvRW (event uid tid lab)

data EvRWₜ {Label : Set} {{_ : LabelClass Label}} (tag : Tag) : Event Label → Set where
  ev-init : {uid : UniqueId} {loc : Location} {val : Value} → tag ≡ tmov → EvRWₜ tag (event-init uid loc val)
  ev-w    : {uid : UniqueId} {tid : ThreadId} {lab : Label} → (lab-w : labs-w lab) → tag ≡ lab-w-tag lab-w → EvRWₜ tag (event uid tid lab)
  ev-r    : {uid : UniqueId} {tid : ThreadId} {lab : Label} → (lab-r : labs-r lab) → tag ≡ lab-r-tag lab-r → EvRWₜ tag (event uid tid lab)
  
-- | The set of Read/Write events /without/ init events
data EvRWₙ {Label : Set} {{_ : LabelClass Label}} : Event Label → Set where
  ev-r : {uid : UniqueId} {tid : ThreadId} {lab : Label} → labs-r lab → EvRWₙ (event uid tid lab)
  ev-w : {uid : UniqueId} {tid : ThreadId} {lab : Label} → labs-w lab → EvRWₙ (event uid tid lab)

data EvRWₙₜ {Label : Set} {{_ : LabelClass Label}} (tag : Tag) : Event Label → Set where
  ev-w : {uid : UniqueId} {tid : ThreadId} {lab : Label} → (lab-w : labs-w lab) → tag ≡ lab-w-tag lab-w → EvRWₙₜ tag (event uid tid lab)
  ev-r : {uid : UniqueId} {tid : ThreadId} {lab : Label} → (lab-r : labs-r lab) → tag ≡ lab-r-tag lab-r → EvRWₙₜ tag (event uid tid lab)

-- r = relaxed
-- a = atomic
EvRᵣ EvRₐ EvWᵣ EvWₐ : {Label : Set} {{_ : LabelClass Label}} → Pred (Event Label) ℓzero
EvRᵣ = EvRₜ tmov -- relaxed reads
EvRₐ = EvRₜ trmw -- atomic reads
EvWᵣ = EvWₜ tmov -- relaxed writes
EvWₐ = EvWₜ trmw -- atomic writes
